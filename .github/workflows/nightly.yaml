name: Nightly Builder
on:
  schedule:
    - cron: "0 0 * * *" # build nightly!

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.ARTICHOKE_NIGHTLY_VERSION == ''
        run: |
          echo "::set-env name=ARTICHOKE_NIGHTLY_VERSION::nightly-$(date '+%Y-%m-%d')"
          echo "version is: ${{ env.ARTICHOKE_NIGHTLY_VERSION }}"

      - name: Clone Artichoke
        uses: actions/checkout@v2
        with:
          repository: artichoke/artichoke
          path: artichoke

      - name: Set latest_commit
        id: latest_commit
        working-directory: artichoke
        run: echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.ARTICHOKE_NIGHTLY_VERSION }}
          release_name: ${{ env.ARTICHOKE_NIGHTLY_VERSION }}
          draft: true
          prerelease: false
          body: artichoke/artichoke@${{ steps.latest_commit.outputs.commit }}

      - name: Save release commit hash to artifact
        run: echo "${{ steps.latest_commit.outputs.commit }}" > artifacts/release-commit-hash

      - name: Save release ID to artifact
        run: echo "${{ steps.release.outputs.id }}" > artifacts/release-id

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.ARTICHOKE_NIGHTLY_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: Build Release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        build:
          - linux
          - linux-musl
          - macos
          - windows
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
    env:
      RUST_BACKTRACE: 1

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ".ruby-version"

      - name: Install Clang
        run: sudo apt install clang
        if: matrix.os == 'ubuntu-latest'

      - name: Install Clang
        run: choco install llvm --no-progress
        if: matrix.os == 'windows-latest'

      - name: Install Bison
        run: sudo apt install bison
        if: matrix.os == 'ubuntu-latest'

      - name: Install Bison
        run: choco install winflexbison3 --no-progress
        if: matrix.os == 'windows-latest'

      - name: Install musl
        run: sudo apt install musl-tools
        if: matrix.build == 'linux-musl'

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Set release upload URL and release version
        shell: bash
        id: release_info
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          echo "release upload url: $release_upload_url"
          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=RELEASE_VERSION::$release_version"
          echo "release version: $release_version"
          release_commit="$(cat artifacts/release-commit-hash)"
          echo "::set-env name=RELEASE_COMMIT_HASH::$release_commit"
          echo "::set-output name=commit::$release_commit"
          echo "release commit: $release_commit"

      - name: Clone Artichoke
        uses: actions/checkout@v2
        with:
          repository: artichoke/artichoke
          path: artichoke
          ref: ${{ steps.release_info.outputs.commit }}

      - name: Set strip linker flag
        if: matrix.build == 'linux' || matrix.build == 'linux-musl' || matrix.build == 'macos'
        # strip binary artifacts with a linker flag
        # https://github.com/rust-lang/cargo/issues/3483#issuecomment-431209957
        run: echo "::set-env name=RUSTFLAGS::-C link-arg=-s"

      - name: Build release artifacts
        working-directory: artichoke
        run: cargo build --verbose --release  --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          staging="artichoke-nightly-${{ matrix.target }}"
          mkdir -p "$staging"/
          cp artichoke/{README.md,LICENSE} "$staging/"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "artichoke/target/${{ matrix.target }}/release/artichoke.exe" "$staging/"
            cp "artichoke/target/${{ matrix.target }}/release/airb.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "::set-env name=ASSET::$staging.zip"
          else
            cp "artichoke/target/${{ matrix.target }}/release/artichoke" "$staging/"
            cp "artichoke/target/${{ matrix.target }}/release/airb" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "::set-env name=ASSET::$staging.tar.gz"
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  finalize-release:
    name: Publish Release
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Set publish_info
        id: publish_info
        run: echo "::set-output name=release_id::$(cat artifacts/release-id)"

      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.publish_info.outputs.release_id }}

      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 7
